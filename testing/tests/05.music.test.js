/* eslint-disable no-undef */
import BasePage from '../PageObjects/BasePage';
import TopBar from '../PageObjects/TopBar';
import LoginPage from '../PageObjects/LoginPage';
import NewPostForm from '../PageObjects/NewPostForm';
import NewMusicForm from '../PageObjects/NewMusicForm';
import Music from '../PageObjects/Music';
import ProfilePage from '../PageObjects/ProfilePage';
import ConfirmWindow from '../PageObjects/ConfirmWindow';
import SuccessWindow from '../PageObjects/SuccessWindow';
import config from '../../config';
import uploadFile from '../helpers/uploadFile';
import clearInput from '../helpers/clearInput';

describe('Check music functionality', () => {
	beforeEach(() => {
		browser.setWindowSize(1920, 1080);
		BasePage.open();
		TopBar.profileMenu.click();
		expect(TopBar.loginListItem).toBeDisplayed();
		TopBar.loginListItem.click();
		LoginPage.emailInput.setValue(config.testEmail);
		LoginPage.passwordInput.setValue(config.testPasswordChanged);
		LoginPage.loginButton.click();
		expect(NewPostForm.pageTitle).toHaveText('Create your post');
		TopBar.musicTab.click();
		expect(NewMusicForm.pageTitle).toHaveText('Add music');
	});
	afterEach(() => {
		browser.reloadSession();
	});
	it('should display elements on new music form', () => {
		expect(NewMusicForm.authorInput).toBeDisplayed();
		expect(NewMusicForm.genreInput).toBeDisplayed();
		expect(NewMusicForm.musicNoteButton).toBeDisplayed();
		expect(NewMusicForm.musicNoteButton).toBeClickable();
		expect(NewMusicForm.addSongButton).toBeDisplayed();
		expect(NewMusicForm.addSongButton).toBeDisabled();
		uploadFile(NewMusicForm.hiddenAudioInput, '../assets/audios/augenblick.mp3');
		expect(NewMusicForm.newAudioName).toBeDisplayed();
		expect(NewMusicForm.audioNameEditButton).toBeDisplayed();
		expect(NewMusicForm.audioNameDeleteButton).toBeDisplayed();
		expect(NewMusicForm.addSongButton).toBeClickable();
	});
	it('should display error when adding music with invalid data', () => {
		uploadFile(NewMusicForm.hiddenAudioInput, '../assets/audios/luftbaloons.mp3');
		NewMusicForm.addSongButton.click();
		NewMusicForm.authorError.waitForDisplayed();
		expect(NewMusicForm.authorError).toBeDisplayed();
		expect(NewMusicForm.authorError).toHaveText('Author is required !');
		expect(NewMusicForm.genreError).toBeDisplayed();
		expect(NewMusicForm.genreError).toHaveText('Genre is required !');
		NewMusicForm.authorInput.setValue('test author');
		NewMusicForm.addSongButton.click();
		NewMusicForm.authorError.waitForExist({ reverse: true });
		expect(NewMusicForm.genreError).toHaveText('Genre is required !');
		clearInput(NewMusicForm.authorInput);
		NewMusicForm.genreInput.setValue('test genre');
		NewMusicForm.addSongButton.click();
		expect(NewMusicForm.authorError).toHaveText('Author is required !');
		NewMusicForm.genreError.waitForExist({ reverse: true });
	});
	it('shoud successfully add new music', () => {
		NewMusicForm.authorInput.setValue('test author');
		NewMusicForm.genreInput.setValue('test genre');
		uploadFile(NewMusicForm.hiddenAudioInput, '../assets/audios/luftbaloons.mp3');
		expect(NewMusicForm.newAudioName).toBeElementsArrayOfSize(1);
		expect(NewMusicForm.audioNameEditButton).toBeElementsArrayOfSize(1);
		expect(NewMusicForm.audioNameDeleteButton).toBeElementsArrayOfSize(1);
		uploadFile(NewMusicForm.hiddenAudioInput, '../assets/audios/augenblick.mp3');
		expect(NewMusicForm.newAudioName).toBeElementsArrayOfSize(2);
		expect(NewMusicForm.audioNameEditButton).toBeElementsArrayOfSize(2);
		expect(NewMusicForm.audioNameDeleteButton).toBeElementsArrayOfSize(2);
		NewMusicForm.audioNameDeleteButton[0].click();
		expect(NewMusicForm.newAudioName).toBeElementsArrayOfSize(1);
		expect(NewMusicForm.audioNameEditButton).toBeElementsArrayOfSize(1);
		expect(NewMusicForm.audioNameDeleteButton).toBeElementsArrayOfSize(1);
		NewMusicForm.audioNameEditButton[0].click();
		expect(NewMusicForm.audioNameEditInput[0]).toBeDisplayed();
		clearInput(NewMusicForm.audioNameEditInput[0]);
		NewMusicForm.audioNameEditInput[0].setValue('test audio name');
		NewMusicForm.audioNameSaveButton[0].click();
		expect(NewMusicForm.newAudioName[0]).toHaveText('test audio name');
		NewMusicForm.addSongButton.click();
		expect(Music.audioName).toBeDisplayed();
		expect(Music.audioName).toHaveText('test audio name');
		expect(Music.musicAuthor).toBeDisplayed();
		expect(Music.musicAuthor).toHaveText('test author');
		expect(Music.musicGenre).toBeDisplayed();
		expect(Music.musicGenre).toHaveText('test genre');
		expect(Music.playPauseButton).toBeDisplayed();
		expect(Music.playPauseButton).toBeClickable();
		expect(Music.audioVolumeButton).toBeDisplayed();
		expect(Music.audioVolumeButton).toBeClickable();
	});
	it('should successfully delete music', () => {
		TopBar.profileMenu.click();
		TopBar.profileListItem.click();
		browser.refresh();
		expect(ProfilePage.pageTitle).toHaveText('Profile');
		ProfilePage.profileMusicTab.click();
		expect(Music.musicAuthor).toBeDisplayed();
		expect(Music.musicAuthor).toHaveText('test author');
		expect(Music.deleteMusicButton).toBeDisplayed();
		Music.deleteMusicButton.click();
		expect(ConfirmWindow.content).toBeDisplayed();
		expect(ConfirmWindow.calcelButton).toBeDisplayed();
		ConfirmWindow.calcelButton.click();
		ConfirmWindow.content.waitForExist({ reverse: true });
		Music.deleteMusicButton.click();
		expect(ConfirmWindow.content).toBeDisplayed();
		expect(ConfirmWindow.confirmButton).toBeDisplayed();
		ConfirmWindow.confirmButton.click();
		expect(SuccessWindow.content).toBeDisplayed();
		expect(SuccessWindow.okButton).toBeDisplayed();
		SuccessWindow.okButton.click();
		ProfilePage.profileMusicTab.click();
		Music.musicAuthor.waitForExist({ reverse: true });
	});
});
